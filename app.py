import streamlit as st
import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64
from batch_prediction import batch_prediction_page

# Configuration de la page
st.set_page_config(
    page_title="Pr√©diction du Revenu Annuel",
    page_icon="üí∞",
    layout="wide"
)

# Fonction pour la page principale
def main_page():
    # Titre de l'application
    st.title("Pr√©diction du Revenu Annuel d'un Marocain")
    st.markdown("Cette application permet de pr√©dire le revenu annuel d'un marocain en fonction de ses caract√©ristiques socio-d√©mographiques.")

    # URL de l'API
    API_URL = "http://localhost:8000/predict"

    # Fonction pour faire une pr√©diction via l'API
    def predict_income(data):
        try:
            response = requests.post(API_URL, json=data)
            if response.status_code == 200:
                return response.json()["revenu_predit"]
            else:
                st.error(f"Erreur lors de la pr√©diction: {response.text}")
                return None
        except Exception as e:
            st.error(f"Erreur de connexion √† l'API: {str(e)}")
            return None

    # Interface utilisateur pour saisir les donn√©es
    st.header("Saisissez les informations")

    # Cr√©ation de colonnes pour organiser les inputs
    col1, col2, col3 = st.columns(3)

    with col1:
        st.subheader("Informations personnelles")
        age = st.slider("√Çge", 18, 80, 30)
        
        # Cat√©gorie d'√¢ge (calcul√©e automatiquement)
        if age < 30:
            categorie_age = "Jeune"
            categorie_age_encoded = 0
        elif age < 50:
            categorie_age = "Adulte"
            categorie_age_encoded = 1
        elif age < 65:
            categorie_age = "S√©nior"
            categorie_age_encoded = 2
        else:
            categorie_age = "√Çg√©"
            categorie_age_encoded = 3
        
        st.info(f"Cat√©gorie d'√¢ge: {categorie_age}")
        
        sexe = st.radio("Sexe", ["Homme", "Femme"])
        sexe_Homme = sexe == "Homme"
        
        milieu = st.radio("Milieu", ["Urbain", "Rural"])
        milieu_Urbain = milieu == "Urbain"
        
        taille_foyer = st.slider("Taille du foyer", 1, 10, 3)
        
        etat_matrimonial = st.selectbox("√âtat matrimonial", 
                                       ["C√©libataire", "Mari√©", "Divorc√©", "Veuf"])
        # One-hot encoding pour l'√©tat matrimonial
        etat_matrimonial_C√©libataire = etat_matrimonial == "C√©libataire"
        etat_matrimonial_Mari√© = etat_matrimonial == "Mari√©"
        etat_matrimonial_Divorc√© = etat_matrimonial == "Divorc√©"
        etat_matrimonial_Veuf = etat_matrimonial == "Veuf"

    with col2:
        st.subheader("√âducation et profession")
        niveau_education = st.selectbox("Niveau d'√©ducation", 
                                       ["Sans niveau", "Fondamental", "Secondaire", "Sup√©rieur"])
        
        # Encodage du niveau d'√©ducation
        education_mapping = {"Sans niveau": 0, "Fondamental": 1, "Secondaire": 2, "Sup√©rieur": 3}
        niveau_education_encoded = education_mapping[niveau_education]
        
        annees_experience = st.slider("Ann√©es d'exp√©rience", 0, 50, 5)
        
        categorie_sociopro = st.selectbox("Cat√©gorie socioprofessionnelle", 
                                         ["Groupe 1: Cadres sup√©rieurs et professions lib√©rales",
                                          "Groupe 2: Cadres moyens et employ√©s",
                                          "Groupe 3: Inactifs (retrait√©s, rentiers)",
                                          "Groupe 4: Exploitants agricoles et ouvriers agricoles",
                                          "Groupe 5: Artisans et ouvriers qualifi√©s",
                                          "Groupe 6: Man≈ìuvres et petits m√©tiers"])
        
        # Encodage de la cat√©gorie socioprofessionnelle
        categorie_socioprofessionnelle_encoded = int(categorie_sociopro[7]) - 1
        
        a_retraite = st.checkbox("B√©n√©ficie d'une retraite")
        aide_sociale = st.checkbox("B√©n√©ficie d'une aide sociale")
        a_acces_credit = st.checkbox("A acc√®s au cr√©dit")

    with col3:
        st.subheader("Patrimoine et r√©gion")
        possede_voiture = st.checkbox("Poss√®de une voiture")
        possede_logement = st.checkbox("Poss√®de un logement")
        possede_terrain = st.checkbox("Poss√®de un terrain")
        
        region = st.selectbox("R√©gion", 
                             ["Casablanca-Settat", "Rabat-Sal√©-K√©nitra", "F√®s-Mekn√®s", 
                              "Marrakech-Safi", "Tanger-T√©touan-Al Hoce√Øma", "L'Oriental",
                              "Souss-Massa", "Dr√¢a-Tafilalet", "B√©ni Mellal-Kh√©nifra",
                              "Guelmim-Oued Noun", "La√¢youne-Sakia El Hamra", "Dakhla-Oued Ed-Dahab"])
        
        # One-hot encoding pour la r√©gion
        regions = ["Casablanca-Settat", "Dakhla-Oued Ed-Dahab", "Dr√¢a-Tafilalet", 
                   "F√®s-Mekn√®s", "Guelmim-Oued Noun", "L'Oriental", 
                   "La√¢youne-Sakia El Hamra", "Marrakech-Safi", 
                   "Rabat-Sal√©-K√©nitra", "Souss-Massa", "Tanger-T√©touan-Al Hoce√Øma"]
        
        region_encoded = {f"region_{r.replace('-', '_').replace(' ', '_').replace('\'', '_')}": (region == r) for r in regions}

    # Bouton pour lancer la pr√©diction
    if st.button("Pr√©dire le revenu annuel"):
        # Pr√©paration des donn√©es pour l'API
        input_data = {
            # Variables num√©riques
            "age": float(age),
            "taille_foyer": float(taille_foyer),
            "aide_sociale": float(aide_sociale),
            "a_acces_credit": float(a_acces_credit),
            "a_retraite": float(a_retraite),
            "possede_voiture": float(possede_voiture),
            "possede_logement": float(possede_logement),
            "possede_terrain": float(possede_terrain),
            "annees_experience": float(annees_experience),
            
            # Variables cat√©gorielles encod√©es
            "niveau_education_encoded": niveau_education_encoded,
            "categorie_socioprofessionnelle_encoded": categorie_socioprofessionnelle_encoded,
            "categorie_age_encoded": categorie_age_encoded,
            
            # Variables binaires
            "sexe_Homme": sexe_Homme,
            "milieu_Urbain": milieu_Urbain,
            
            # √âtat matrimonial (one-hot encoding)
            "etat_matrimonial_Divorc√©": etat_matrimonial_Divorc√©,
            "etat_matrimonial_Mari√©": etat_matrimonial_Mari√©,
            "etat_matrimonial_Veuf": etat_matrimonial_Veuf,
            
            # R√©gion (one-hot encoding)
            "region_Casablanca_Settat": region == "Casablanca-Settat",
            "region_Dakhla_Oued_Ed_Dahab": region == "Dakhla-Oued Ed-Dahab",
            "region_Dr√¢a_Tafilalet": region == "Dr√¢a-Tafilalet",
            "region_F√®s_Mekn√®s": region == "F√®s-Mekn√®s",
            "region_Guelmim_Oued_Noun": region == "Guelmim-Oued Noun",
            "region_L_Oriental": region == "L'Oriental",
            "region_La√¢youne_Sakia_El_Hamra": region == "La√¢youne-Sakia El Hamra",
            "region_Marrakech_Safi": region == "Marrakech-Safi",
            "region_Rabat_Sal√©_K√©nitra": region == "Rabat-Sal√©-K√©nitra",
            "region_Souss_Massa": region == "Souss-Massa",
            "region_Tanger_T√©touan_Al_Hoce√Øma": region == "Tanger-T√©touan-Al Hoce√Øma"
        }
        
        # Appel √† l'API pour la pr√©diction
        with st.spinner("Calcul en cours..."):
            predicted_income = predict_income(input_data)
        
        if predicted_income is not None:
            # Affichage du r√©sultat
            st.success(f"Revenu annuel pr√©dit: {predicted_income:.2f} DH")
            
            # Visualisation du r√©sultat
            st.subheader("Comparaison avec les moyennes nationales")
            
            # Donn√©es de r√©f√©rence (selon l'√©nonc√©)
            revenu_moyen_national = 21949
            revenu_moyen_urbain = 26988
            revenu_moyen_rural = 12862
            
            # Cr√©ation d'un dataframe pour la visualisation
            comparison_data = pd.DataFrame({
                'Cat√©gorie': ['Pr√©diction', 'Moyenne nationale', 
                             f'Moyenne {milieu.lower()}'],
                'Revenu annuel (DH)': [predicted_income, revenu_moyen_national, 
                                      revenu_moyen_urbain if milieu == "Urbain" else revenu_moyen_rural]
            })
            
            # Cr√©ation du graphique
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.barplot(x='Cat√©gorie', y='Revenu annuel (DH)', data=comparison_data, ax=ax)
            ax.set_title('Comparaison du revenu pr√©dit avec les moyennes nationales')
            ax.set_ylabel('Revenu annuel (DH)')
            ax.set_xlabel('')
            
            # Affichage du graphique dans Streamlit
            st.pyplot(fig)
            
            # Interpr√©tation du r√©sultat
            if predicted_income > revenu_moyen_national:
                st.info(f"Le revenu pr√©dit est sup√©rieur √† la moyenne nationale de {predicted_income - revenu_moyen_national:.2f} DH.")
            else:
                st.info(f"Le revenu pr√©dit est inf√©rieur √† la moyenne nationale de {revenu_moyen_national - predicted_income:.2f} DH.")
            
            # Calcul du revenu par personne
            revenu_par_personne = predicted_income / taille_foyer
            st.info(f"Revenu par personne dans le foyer: {revenu_par_personne:.2f} DH")
            
            # Affichage de la position par rapport au seuil de pauvret√©
            seuil_pauvrete = 5000  # Exemple de seuil de pauvret√© (√† ajuster selon les donn√©es r√©elles)
            if revenu_par_personne < seuil_pauvrete:
                st.warning(f"Le revenu par personne est inf√©rieur au seuil de pauvret√© estim√© √† {seuil_pauvrete} DH.")
            else:
                st.success(f"Le revenu par personne est sup√©rieur au seuil de pauvret√© estim√© √† {seuil_pauvrete} DH.")

    # Informations suppl√©mentaires
    st.header("Informations sur le mod√®le")
    st.markdown("""
    Ce mod√®le a √©t√© entra√Æn√© sur un dataset simul√© de 40 000 Marocains avec des caract√©ristiques socio-d√©mographiques vari√©es.
    Les principales variables qui influencent le revenu sont:
    - L'√¢ge et la cat√©gorie d'√¢ge
    - Le sexe
    - Le milieu (urbain/rural)
    - Le niveau d'√©ducation
    - Les ann√©es d'exp√©rience
    - La cat√©gorie socioprofessionnelle
    - La r√©gion
    - Les possessions (voiture, logement, terrain)
    - L'acc√®s au cr√©dit et aux aides sociales
    """)

# Navigation entre les pages
def navigation():
    st.sidebar.title("Navigation")
    page = st.sidebar.radio("Aller √†", ["Pr√©diction individuelle", "Pr√©diction par lot"])
    
    if page == "Pr√©diction individuelle":
        main_page()
    else:
        batch_prediction_page()

# Pied de page
def footer():
    st.markdown("---")
    st.markdown("Mini-projet Intelligence Artificielle - 2√®me ann√©e Cycle d'ing√©nieurs GI")

# Ex√©cution de l'application
if __name__ == "__main__":
    navigation()
    footer()