import streamlit as st
import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Configuration de la page
st.set_page_config(
    page_title="Pr√©diction du Revenu Annuel",
    page_icon="üí∞",
    layout="wide"
)

# Titre de l'application
st.title("Pr√©diction du Revenu Annuel d'un Marocain")
st.markdown("Cette application permet de pr√©dire le revenu annuel d'un marocain en fonction de ses caract√©ristiques socio-d√©mographiques.")

# URL de l'API
API_URL = "http://localhost:8000/predict"

# Fonction pour faire une pr√©diction via l'API
def predict_income(data):
    try:
        response = requests.post(API_URL, json=data)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Erreur lors de la pr√©diction: {response.text}")
            return None
    except Exception as e:
        st.error(f"Erreur de connexion √† l'API: {str(e)}")
        return None

# Interface utilisateur pour saisir les donn√©es
st.header("Saisissez les informations")

# Cr√©ation de colonnes pour organiser les inputs
col1, col2, col3 = st.columns(3)

with col1:
    st.subheader("Informations personnelles")
    age = st.slider("√Çge", 18, 80, 30)
    
    
    sexe = st.radio("Sexe", ["Homme", "Femme"])
    
    milieu = st.radio("Milieu", ["Urbain", "Rural"])
    est_urbain = 1 if milieu == "Urbain" else 0
    
    etat_matrimonial = st.selectbox("√âtat matrimonial", 
                                   ["C√©libataire", "Mari√©", "Divorc√©", "Veuf"])
    est_marie = 1 if etat_matrimonial == "Mari√©" else 0
    
    taille_foyer = st.slider("Taille du foyer", 1, 10, 3)
    

with col2:
    st.subheader("√âducation et profession")
    niveau_education = st.selectbox("Niveau d'√©ducation", 
                                   ["Sans niveau", "Fondamental", "Secondaire", "Sup√©rieur"])
    
    annees_experience = st.slider("Ann√©es d'exp√©rience", 0, 50, 5)
    
    categorie_socioprofessionnelle = st.selectbox("Cat√©gorie socioprofessionnelle", 
                                                 ["Groupe 1 : Cadres sup√©rieurs et professions lib√©rales",
                                                  "Groupe 2 : Cadres moyens et employ√©s",
                                                  "Groupe 3 : Inactifs (retrait√©s, rentiers)",
                                                  "Groupe 4 : Travailleurs agricoles",
                                                  "Groupe 5 : Ouvriers qualifi√©s et artisans",
                                                  "Groupe 6 : Man≈ìuvres et ch√¥meurs"])
    
    a_retraite = st.checkbox("B√©n√©ficie d'une retraite")
    aide_sociale = st.checkbox("B√©n√©ficie d'une aide sociale")
    a_acces_credit = st.checkbox("A acc√®s au cr√©dit")

with col3:
    st.subheader("Patrimoine et r√©gion")
    possede_voiture = st.checkbox("Poss√®de une voiture")
    possede_logement = st.checkbox("Poss√®de un logement")
    possede_terrain = st.checkbox("Poss√®de un terrain")
    
    # Calcul automatique du niveau socio-√©conomique
    niveau_socioeco = float(possede_voiture) + float(possede_logement) + float(possede_terrain)
    st.info(f"Niveau socio-√©conomique: {niveau_socioeco}/3")
    
    regions = [
        "Tanger-T√©touan-Al Hoce√Øma", "L'Oriental", "F√®s-Mekn√®s", "Rabat-Sal√©-K√©nitra",
        "B√©ni Mellal-Kh√©nifra", "Casablanca-Settat", "Marrakech-Safi", "Dr√¢a-Tafilalet",
        "Souss-Massa", "Guelmim-Oued Noun", "La√¢youne-Sakia El Hamra", "Dakhla-Oued Ed-Dahab"
    ]
    region = st.selectbox("R√©gion", regions)

# Bouton pour lancer la pr√©diction
if st.button("Pr√©dire le revenu annuel"):
    # Pr√©paration des donn√©es pour l'API
    input_data = {
        "age": age,
        "sexe": sexe,
        "milieu": milieu,
        "etat_matrimonial": etat_matrimonial,
        "region": region,
        "niveau_education": niveau_education,
        "categorie_socioprofessionnelle": categorie_socioprofessionnelle,
        "taille_foyer": float(taille_foyer),
        "aide_sociale": int(aide_sociale),
        "a_acces_credit": int(a_acces_credit),
        "a_retraite": int(a_retraite),
        "possede_voiture": float(possede_voiture),
        "possede_logement": float(possede_logement),
        "possede_terrain": int(possede_terrain),
        "annees_experience": float(annees_experience),
        "est_urbain": est_urbain,
        "est_marie": est_marie,
        "weight": 1.0,
        "niveau_socioeco": float(niveau_socioeco)
    }

    # Appel √† l'API pour la pr√©diction
    with st.spinner("Calcul en cours..."):
        result = predict_income(input_data)
    
    if result:
        # Affichage du r√©sultat
        st.success(f"Revenu annuel pr√©dit: {result['revenu_predit']:.2f} DH")
        
        # Visualisation du r√©sultat
        st.subheader("Comparaison avec les moyennes nationales")
        
        # Donn√©es de r√©f√©rence (selon l'√©nonc√©)
        revenu_moyen_national = 21949
        revenu_moyen_urbain = 26988
        revenu_moyen_rural = 12862
        
        # Cr√©ation d'un dataframe pour la visualisation
        comparison_data = pd.DataFrame({
            'Cat√©gorie': ['Pr√©diction', 'Moyenne nationale', 
                         f'Moyenne {milieu.lower()}'],
            'Revenu annuel (DH)': [result['revenu_predit'], revenu_moyen_national, 
                                  revenu_moyen_urbain if milieu == "Urbain" else revenu_moyen_rural]
        })
        
        # Cr√©ation du graphique
        fig, ax = plt.subplots(figsize=(10, 6))
        bars = sns.barplot(x='Cat√©gorie', y='Revenu annuel (DH)', data=comparison_data, ax=ax)
        
        # Ajout des valeurs sur les barres
        for bar in bars.patches:
            bars.annotate(f"{bar.get_height():.0f} DH",
                         (bar.get_x() + bar.get_width() / 2, bar.get_height()),
                         ha='center', va='bottom', fontsize=10)
        
        ax.set_title('Comparaison du revenu pr√©dit avec les moyennes nationales')
        ax.set_ylabel('Revenu annuel (DH)')
        ax.set_xlabel('')
        
        # Affichage du graphique dans Streamlit
        st.pyplot(fig)
        
        # Interpr√©tation du r√©sultat
        if result['revenu_predit'] > revenu_moyen_national:
            st.info(f"Le revenu pr√©dit est sup√©rieur √† la moyenne nationale de {result['revenu_predit'] - revenu_moyen_national:.2f} DH.")
        else:
            st.info(f"Le revenu pr√©dit est inf√©rieur √† la moyenne nationale de {revenu_moyen_national - result['revenu_predit']:.2f} DH.")
        
        # Calcul du revenu par personne
        revenu_par_personne = result['revenu_predit'] / taille_foyer
        st.info(f"Revenu par personne dans le foyer: {revenu_par_personne:.2f} DH")
        
        # Affichage de la position par rapport au seuil de pauvret√©
        seuil_pauvrete = 5000  # Exemple de seuil de pauvret√© (√† ajuster selon les donn√©es r√©elles)
        if revenu_par_personne < seuil_pauvrete:
            st.warning(f"Le revenu par personne est inf√©rieur au seuil de pauvret√© estim√© √† {seuil_pauvrete} DH.")
        else:
            st.success(f"Le revenu par personne est sup√©rieur au seuil de pauvret√© estim√© √† {seuil_pauvrete} DH.")

# Informations suppl√©mentaires
st.header("Informations sur le mod√®le")
st.markdown("""
Ce mod√®le a √©t√© entra√Æn√© sur un dataset simul√© de 40 000 Marocains avec des caract√©ristiques socio-d√©mographiques vari√©es.
Les principales variables qui influencent le revenu sont:
- L'√¢ge et la cat√©gorie d'√¢ge
- Le sexe
- Le milieu (urbain/rural)
- Le niveau d'√©ducation
- Les ann√©es d'exp√©rience
- La cat√©gorie socioprofessionnelle
- La r√©gion
- Les possessions (voiture, logement, terrain)
- L'acc√®s au cr√©dit et aux aides sociales
""")

# Pied de page
st.markdown("---")
st.markdown("Mini-projet Intelligence Artificielle - 2√®me ann√©e Cycle d'ing√©nieurs GI")